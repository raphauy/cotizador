generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  VENDEDOR
}

model User {
  id              String    @id @default(cuid())
  name            String                        // gennext: show.column  
  email           String    @unique             // gennext: show.column
  emailVerified   DateTime?                     // gennext: show.column
  image           String?
  role            UserRole       // gennext: show.column
  otpConfirmation OTPConfirmation?

  createdAt       DateTime  @default(now())     // gennext: skip.zod
  updatedAt       DateTime  @updatedAt          // gennext: skip.zod

  notes           Note[]

  createdCotizations Cotization[] @relation(name: "CotizationCreator")
  sellerCotizations  Cotization[] @relation(name: "CotizationSeller")
}

model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
}

model OTPConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum ClientType {
  CLIENTE_FINAL
  ARQUITECTO_ESTUDIO
  DISTRIBUIDOR
}

model Client {
    id                String    @id @default(cuid())
    name              String                    // gennext: show.column
    phone             String?                   // gennext: show.column
    email             String                    // gennext: show.column
    slug              String                    // gennext: show.column 

    type              ClientType                // gennext: show.column

    createdAt         DateTime  @default(now()) // gennext: skip.zod
    updatedAt         DateTime  @updatedAt      // gennext: skip.zod

    cotizations       Cotization[]
}

enum CotizationStatus {
  BORRADOR
  COTIZADO
  VENDIDO
  PERDIDO
}

enum CotizationType {
  EDIFICIO
  TOP_HOME
  COMUN
  DISTRIBUIDOR
}

model Cotization {
  id                String    @id @default(cuid())
  number            Int         @default(autoincrement()) // gennext: show.column
  status            CotizationStatus @default(BORRADOR)  // genext: show.column
  type              CotizationType                       // genext: show.column
  date              DateTime  @default(now())            // genext: show.column
  obra              String?                              // genext: show.column

  createdAt         DateTime  @default(now())             // gennext: skip.zod
  updatedAt         DateTime  @updatedAt                  // gennext: skip.zod  

  client            Client    @relation(fields: [clientId], references: [id], onDelete: Restrict) // genext: skip.list
  clientId          String

  notes             Note[]                                                                     // genext: skip.list
  works             Work[]                                                                     // genext: skip.list

  // Usuario que ingresa la cotizaci√≥n
  creator           User      @relation(name: "CotizationCreator", fields: [creatorId], references: [id], onDelete: Restrict)
  creatorId         String

  // Usuario cotizador
  seller            User      @relation(name: "CotizationSeller", fields: [sellerId], references: [id], onDelete: Restrict)
  sellerId          String
}

model Note {
  id                String    @id @default(cuid())
  text              String                                  // genext: show.column
  private           Boolean                                 // genext: show.column

  createdAt         DateTime  @default(now())               // gennext: skip.zod  
  updatedAt         DateTime  @updatedAt                    // gennext: skip.zod

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)    // genext: skip.list
  userId            String
  cotization        Cotization @relation(fields: [cotizationId], references: [id], onDelete: Cascade) // genext: skip.list
  cotizationId      String
}

model WorkType {
  id                String    @id @default(cuid())
  name              String                                   // genext: show.column 
  createdAt         DateTime  @default(now())                // gennext: skip.zod
  updatedAt         DateTime  @updatedAt                     // gennext: skip.zod

  works             Work[]                                   // genext: skip.list
}

enum ItemType {
  TRAMO
  ZOCALO
  ALZADA
  TERMINACION
  REGRUESO
  MANO_DE_OBRA
  AJUSTE
}


model Item {
  id                String    @id @default(cuid())
  type              ItemType
  orden             Int       @default(0)

  largo             Float?    @default(0)
  ancho             Float?    @default(0)
  superficie        Float?    @default(0)

  metros            Float?    @default(0)
  
  valor             Float?    @default(0)

  createdAt         DateTime  @default(now())             // gennext: skip.zod

  work              Work      @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId            String
}

model Color {
  id                        String    @id @default(cuid())
  name                      String                                   // genext: show.column
  image                     String?                                   // genext: show.column

  clienteFinalPrice         Float @default(0)
  arquitectoStudioPrice     Float @default(0)
  distribuidorPrice         Float @default(0)

  material          Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId        String

  works             Work[]                                   // genext: skip.list

}

model Material {
  id                String    @id @default(cuid())
  name              String                                   // genext: show.column 

  colors            Color[]                                  // genext: skip.list
  works             Work[]                                   // genext: skip.list
}

model Work {
  id                String    @id @default(cuid())
  name              String                                   // genext: show.column 
  createdAt         DateTime  @default(now())                // gennext: skip.zod
  updatedAt         DateTime  @updatedAt                     // gennext: skip.zod

  workType          WorkType  @relation(fields: [workTypeId], references: [id], onDelete: Cascade)
  workTypeId        String

  material          Material  @relation(fields: [materialId], references: [id], onDelete: NoAction)
  materialId        String

  color            Color     @relation(fields: [colorId], references: [id], onDelete: NoAction)
  colorId          String

  cotization        Cotization @relation(fields: [cotizationId], references: [id], onDelete: Cascade)
  cotizationId      String

  items             Item[]                                   // genext: skip.list
}